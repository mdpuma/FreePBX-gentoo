{"version":3,"sources":["../src/express-middleware.js"],"names":["createExpressMiddleware","errorCodes","NO_BODY_PARSER","TOKEN_VERIFICATION_FAILURE","responseStatuses","OK","FAILURE","REDIRECT","debug","adapter","middlewareOptions","sendResponse","res","_sendResponse","err","responseOptions","status","failWithNoRetry","redirectLocation","set","content","send","on","statusCode","_headers","handleError","error","respond","next","message","code","propagateErrors","waitForResponse","emit","userError","process","nextTick","slackEventAdapterMiddleware","req","method","path","body","Error","type","token","verificationToken","challenge","emitArguments","event","includeBody","push","includeHeaders","headers"],"mappings":"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","file":"express-middleware.js","sourcesContent":["import debugFactory from 'debug';\nimport { packageIdentifier } from './util';\n\nexport const errorCodes = {\n  NO_BODY_PARSER: 'SLACKEVENTMIDDLEWARE_NO_BODY_PARSER',\n  TOKEN_VERIFICATION_FAILURE: 'SLACKEVENTMIDDLEWARE_TOKEN_VERIFICATION_FAILURE',\n};\n\nconst responseStatuses = {\n  OK: 200,\n  FAILURE: 500,\n  REDIRECT: 302,\n};\n\nconst debug = debugFactory('@slack/events-api:express-middleware');\n\nexport function createExpressMiddleware(adapter, middlewareOptions = {}) {\n  // This function binds a specific response instance to a function that works more like a\n  // a completion handler; one which follows the error-first argument pattern.\n  function sendResponse(res) {\n    // This function is the completion handler for sending a response to an event. It can either\n    // be invoked by automatically or by the user (when using the `waitForResponse` option).\n    return function _sendResponse(err, responseOptions = {}) {\n      debug('sending response - error: %s, responseOptions: %o', err, responseOptions);\n      // Deal with errors up front\n      if (err) {\n        res.status(responseStatuses.FAILURE);\n      } else {\n        // First determine the response status\n        if (responseOptions) {\n          if (responseOptions.failWithNoRetry) {\n            res.status(responseStatuses.FAILURE);\n          } else if (responseOptions.redirectLocation) {\n            res.status(responseStatuses.REDIRECT);\n          }\n        } else {\n          res.status(responseStatuses.OK);\n        }\n\n        // Next determine the response headers\n        if (responseOptions && responseOptions.failWithNoRetry) {\n          res.set('X-Slack-No-Retry', '1');\n        }\n        res.set('X-Slack-Powered-By', packageIdentifier());\n      }\n\n      // Lastly, send the response\n      const content = responseOptions.content || '';\n      debug('response body: %s', content);\n      res.send(content);\n      res.on('finish', () => {\n        // res._headers is an undocumented property, but we feel comfortable using it because:\n        // 1. express depends on it and express is so foundational in node\n        // 2. this is logging code and the risk of this causing a break is minimal\n        // eslint-disable-next-line no-underscore-dangle\n        debug('response finished - status: %d, headers: %o', res.statusCode, res._headers);\n      });\n    };\n  }\n\n  // This function abstracts handling of an error. It inspects the relevant options to dispatch the\n  // error using the right interface (either the next middleware or emitted from\n  // the adapter) and handles the respond function.\n  function handleError(error, respond, next) {\n    debug('handling error - message: %s, code: %s', error.message, error.code);\n    if (middlewareOptions.propagateErrors) {\n      debug('propagating error for next middleware');\n      // The respond function is never invoked because the next middleware is expected to respond\n      next(error);\n      return;\n    }\n    try {\n      if (adapter.waitForResponse) {\n        adapter.emit('error', error, respond);\n      } else {\n        adapter.emit('error', error);\n        respond(error);\n      }\n    } catch (userError) {\n      process.nextTick(() => { throw userError; });\n    }\n  }\n\n  return function slackEventAdapterMiddleware(req, res, next) {\n    debug('request recieved - method: %s, path: %s', req.method, req.path);\n\n    // Bind a response function to this request's respond object. This may be used in a number of\n    // places\n    const respond = sendResponse(res);\n\n    // Check that the request body has been parsed\n    if (!req.body) {\n      const error = new Error('The incoming HTTP request did not have a parsed body.');\n      error.code = errorCodes.NO_BODY_PARSER;\n      handleError(error, respond, next);\n      return;\n    }\n\n    // Handle URL verification challenge\n    if (req.body.type === 'url_verification') {\n      debug('handling url verification');\n      if (req.body.token !== adapter.verificationToken) {\n        debug('url verification failure');\n        const error = new Error('Slack event challenge failed.');\n        error.code = errorCodes.TOKEN_VERIFICATION_FAILURE;\n        error.body = req.body;\n        handleError(error, respond, next);\n        return;\n      }\n      debug('url verification success');\n      respond(null, { content: req.body.challenge });\n      return;\n    }\n\n    // Handle request token verification\n    if (!req.body.token || req.body.token !== adapter.verificationToken) {\n      debug('request token verification failure');\n      const error = new Error('Slack event verification failed');\n      error.code = errorCodes.TOKEN_VERIFICATION_FAILURE;\n      error.body = req.body;\n      handleError(error, respond, next);\n      return;\n    }\n    debug('request token verification success');\n\n    const emitArguments = [req.body.event];\n    if (adapter.includeBody) {\n      emitArguments.push(req.body);\n    }\n    if (adapter.includeHeaders) {\n      emitArguments.push(req.headers);\n    }\n    if (adapter.waitForResponse) {\n      emitArguments.push(respond);\n    } else {\n      respond();\n    }\n\n    try {\n      debug('emitting event -  type: %s, arguments: %o', req.body.event.type, emitArguments);\n      adapter.emit(req.body.event.type, ...emitArguments);\n    } catch (error) {\n      handleError(error, respond, next);\n    }\n  };\n}\n"]}