{"version":3,"sources":["../src/adapter.js"],"names":["debug","errorCodes","BODY_PARSER_NOT_PERMITTED","SlackEventAdapter","signingSecret","options","TypeError","includeBody","includeHeaders","waitForResponse","path","Promise","resolve","then","http","createServer","requestListener","port","reject","server","on","listen","close","error","Error","middlewareOptions","req","res","next","body","code","EventEmitter"],"mappings":";;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;;;AAEA,IAAMA,QAAQ,qBAAa,2BAAb,CAAd;;AAEO,IAAMC,kCAAa;AACxBC,6BAA2B;AADH,CAAnB;;IAIMC,iB,WAAAA,iB;;;AACX,6BAAYC,aAAZ,EAAyC;AAAA,QAAdC,OAAc,uEAAJ,EAAI;;AAAA;;AACvC,QAAI,CAAC,sBAASD,aAAT,CAAL,EAA8B;AAC5B,YAAM,IAAIE,SAAJ,CAAc,0CAAd,CAAN;AACD;;AAHsC;;AAOvC,UAAKF,aAAL,GAAqBA,aAArB;AACA,UAAKG,WAAL,GAAmB,CAAC,CAACF,QAAQE,WAAV,IAAyB,KAA5C;AACA,UAAKC,cAAL,GAAsB,CAAC,CAACH,QAAQG,cAAV,IAA4B,KAAlD;AACA,UAAKC,eAAL,GAAuB,CAAC,CAACJ,QAAQI,eAAV,IAA6B,KAApD;;AAEAT,UAAM,oCAAN,EAA4C;AAC1CO,mBAAa,MAAKA,WADwB;AAE1CC,sBAAgB,MAAKA,cAFqB;AAG1CC,uBAAiB,MAAKA;AAHoB,KAA5C;AAZuC;AAiBxC;;AAED;;;;;mCACqC;AAAA;;AAAA,UAAxBC,IAAwB,uEAAjB,eAAiB;;AACnC;AACA,aAAOC,QAAQC,OAAR,GAAkBC,IAAlB,CAAuB,YAAM;AAClCb,cAAM,2BAAN,EAAmCU,IAAnC;;AAEA,eAAOI,eAAKC,YAAL,CAAkB,OAAKC,eAAL,EAAlB,CAAP;AACD,OAJM,CAAP;AAKD;;;0BAEKC,I,EAAM;AAAA;;AACV,aAAO,KAAKF,YAAL,GACJF,IADI,CACC;AAAA,eAAU,IAAIF,OAAJ,CAAY,UAACC,OAAD,EAAUM,MAAV,EAAqB;AAC/C,iBAAKC,MAAL,GAAcA,MAAd;AACAA,iBAAOC,EAAP,CAAU,OAAV,EAAmBF,MAAnB;AACAC,iBAAOE,MAAP,CAAcJ,IAAd,EAAoB;AAAA,mBAAML,QAAQO,MAAR,CAAN;AAAA,WAApB;AACAnB,gBAAM,2BAAN,EAAmCiB,IAAnC;AACD,SALe,CAAV;AAAA,OADD,CAAP;AAOD;;;2BAEM;AAAA;;AACL,aAAO,IAAIN,OAAJ,CAAY,UAACC,OAAD,EAAUM,MAAV,EAAqB;AACtC,YAAI,OAAKC,MAAT,EAAiB;AACf,iBAAKA,MAAL,CAAYG,KAAZ,CAAkB,UAACC,KAAD,EAAW;AAC3B,mBAAO,OAAKJ,MAAZ;AACA,gBAAII,KAAJ,EAAW;AACTL,qBAAOK,KAAP;AACD,aAFD,MAEO;AACLX;AACD;AACF,WAPD;AAQD,SATD,MASO;AACLM,iBAAO,IAAIM,KAAJ,CAAU,8DAAV,CAAP;AACD;AACF,OAbM,CAAP;AAcD;;;wCAEyC;AAAA,UAAxBC,iBAAwB,uEAAJ,EAAI;;AACxC,UAAMT,kBAAkB,KAAKA,eAAL,CAAqBS,iBAArB,CAAxB;AACA,aAAO,UAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AACzB;AACA,YAAIF,IAAIG,IAAR,EAAc;AACZ,cAAMN,QAAQ,IAAIC,KAAJ,CAAU,+DAAV,CAAd;AACAD,gBAAMO,IAAN,GAAa7B,WAAWC,yBAAxB;AACA0B,eAAKL,KAAL;AACA;AACD;AACDP,wBAAgBU,GAAhB,EAAqBC,GAArB;AACD,OATD;AAUD;;;sCAEuC;AAAA,UAAxBF,iBAAwB,uEAAJ,EAAI;;AACtC,aAAO,oCAAkB,IAAlB,EAAwBA,iBAAxB,CAAP;AACD;;;;EAzEoCM,gB;;AA4EvC;;;;;kBAGe5B,iB","file":"adapter.js","sourcesContent":["import EventEmitter from 'events';\nimport http from 'http';\nimport isString from 'lodash.isstring';\nimport debugFactory from 'debug';\nimport { createHTTPHandler } from './http-handler';\n\nconst debug = debugFactory('@slack/events-api:adapter');\n\nexport const errorCodes = {\n  BODY_PARSER_NOT_PERMITTED: 'SLACKADAPTER_BODY_PARSER_NOT_PERMITTED_FAILURE',\n};\n\nexport class SlackEventAdapter extends EventEmitter {\n  constructor(signingSecret, options = {}) {\n    if (!isString(signingSecret)) {\n      throw new TypeError('SlackEventAdapter needs a signing secret');\n    }\n\n    super();\n\n    this.signingSecret = signingSecret;\n    this.includeBody = !!options.includeBody || false;\n    this.includeHeaders = !!options.includeHeaders || false;\n    this.waitForResponse = !!options.waitForResponse || false;\n\n    debug('adapter instantiated - options: %o', {\n      includeBody: this.includeBody,\n      includeHeaders: this.includeHeaders,\n      waitForResponse: this.waitForResponse,\n    });\n  }\n\n  // TODO: options (like https)\n  createServer(path = '/slack/events') {\n    // NOTE: this is a workaround for a shortcoming of the System.import() tranform\n    return Promise.resolve().then(() => {\n      debug('server created - path: %s', path);\n\n      return http.createServer(this.requestListener());\n    });\n  }\n\n  start(port) {\n    return this.createServer()\n      .then(server => new Promise((resolve, reject) => {\n        this.server = server;\n        server.on('error', reject);\n        server.listen(port, () => resolve(server));\n        debug('server started - port: %s', port);\n      }));\n  }\n\n  stop() {\n    return new Promise((resolve, reject) => {\n      if (this.server) {\n        this.server.close((error) => {\n          delete this.server;\n          if (error) {\n            reject(error);\n          } else {\n            resolve();\n          }\n        });\n      } else {\n        reject(new Error('SlackEventAdapter cannot stop when it did not start a server'));\n      }\n    });\n  }\n\n  expressMiddleware(middlewareOptions = {}) {\n    const requestListener = this.requestListener(middlewareOptions);\n    return (req, res, next) => {\n      // If parser is being used, we can't verify request signature\n      if (req.body) {\n        const error = new Error('Parsing request body prohibits request signature verification');\n        error.code = errorCodes.BODY_PARSER_NOT_PERMITTED;\n        next(error);\n        return;\n      }\n      requestListener(req, res);\n    };\n  }\n\n  requestListener(middlewareOptions = {}) {\n    return createHTTPHandler(this, middlewareOptions);\n  }\n}\n\n/**\n * @alias module:adapter\n */\nexport default SlackEventAdapter;\n"]}