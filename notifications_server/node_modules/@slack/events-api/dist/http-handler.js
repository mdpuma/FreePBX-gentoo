'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.errorCodes = undefined;

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

exports.verifyRequestSignature = verifyRequestSignature;
exports.createHTTPHandler = createHTTPHandler;

var _debug = require('debug');

var _debug2 = _interopRequireDefault(_debug);

var _rawBody = require('raw-body');

var _rawBody2 = _interopRequireDefault(_rawBody);

var _crypto = require('crypto');

var _crypto2 = _interopRequireDefault(_crypto);

var _tsscmp = require('tsscmp');

var _tsscmp2 = _interopRequireDefault(_tsscmp);

var _util = require('./util');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var errorCodes = exports.errorCodes = {
  SIGNATURE_VERIFICATION_FAILURE: 'SLACKHTTPHANDLER_REQUEST_SIGNATURE_VERIFICATION_FAILURE',
  REQUEST_TIME_FAILURE: 'SLACKHTTPHANDLER_REQUEST_TIMELIMIT_FAILURE'
};

var responseStatuses = {
  OK: 200,
  FAILURE: 500,
  REDIRECT: 302,
  NOT_FOUND: 404
};

var debug = (0, _debug2.default)('@slack/events-api:http-handler');

/**
 * Method to verify signature of requests
 *
 * @param {string} signingSecret - Signing secret used to verify request signature
 * @param {string} requestSignature - Signature from request 'x-slack-signature' header
 * @param {number} requestTimestamp - Timestamp from request 'x-slack-request-timestamp' header
 * @param {string} body - Raw body string
 * @returns {boolean} Indicates if request is verified
 */
function verifyRequestSignature(_ref) {
  var signingSecret = _ref.signingSecret,
      requestSignature = _ref.requestSignature,
      requestTimestamp = _ref.requestTimestamp,
      body = _ref.body;

  // Divide current date to match Slack ts format
  // Subtract 5 minutes from current time
  var fiveMinutesAgo = Math.floor(Date.now() / 1000) - 60 * 5;

  if (requestTimestamp < fiveMinutesAgo) {
    debug('request is older than 5 minutes');
    var error = new Error('Slack request signing verification failed');
    error.code = errorCodes.REQUEST_TIME_FAILURE;
    throw error;
  }

  var hmac = _crypto2.default.createHmac('sha256', signingSecret);

  var _requestSignature$spl = requestSignature.split('='),
      _requestSignature$spl2 = _slicedToArray(_requestSignature$spl, 2),
      version = _requestSignature$spl2[0],
      hash = _requestSignature$spl2[1];

  hmac.update(version + ':' + requestTimestamp + ':' + body);

  if (!(0, _tsscmp2.default)(hash, hmac.digest('hex'))) {
    debug('request signature is not valid');
    var _error = new Error('Slack request signing verification failed');
    _error.code = errorCodes.SIGNATURE_VERIFICATION_FAILURE;
    throw _error;
  }

  debug('request signing verification success');
  return true;
}

function createHTTPHandler(adapter) {
  var poweredBy = (0, _util.packageIdentifier)();

  /**
   * Binds a specific response instance to the function that works like a
   * completion handler
   *
   * @param {Object} res - Response object
   * @returns {Function} Returns a function used to send response
   */
  function sendResponse(res) {
    // This function is the completion handler for sending a response to an event. It can either
    // be invoked by automatically or by the user (when using the `waitForResponse` option).
    return function _sendResponse(err, responseOptions) {
      debug('sending response - error: %s, responseOptions: %o', err, responseOptions);
      // Deal with errors up front
      if (err) {
        if (err.status) {
          res.statusCode = err.status;
        } else if (err.code === errorCodes.SIGNATURE_VERIFICATION_FAILURE || err.code === errorCodes.REQUEST_TIME_FAILURE) {
          res.statusCode = responseStatuses.NOT_FOUND;
        } else {
          res.statusCode = responseStatuses.FAILURE;
        }
      } else {
        // First determine the response status
        if (responseOptions) {
          if (responseOptions.failWithNoRetry) {
            res.statusCode = responseStatuses.FAILURE;
          } else if (responseOptions.redirectLocation) {
            res.statusCode = responseStatuses.REDIRECT;
          } else {
            // URL Verification
            res.statusCode = responseStatuses.OK;
          }
        } else {
          res.statusCode = responseStatuses.OK;
        }

        // Next determine the response headers
        if (responseOptions && responseOptions.failWithNoRetry) {
          res.setHeader('X-Slack-No-Retry', '1');
        }
        res.setHeader('X-Slack-Powered-By', poweredBy);
      }

      // Lastly, send the response
      if (responseOptions && responseOptions.content) {
        res.end(responseOptions.content);
      } else {
        res.end();
      }
    };
  }

  /**
   * Abstracts error handling.
   *
   * @param {Error} error
   * @param {Function} respond
   */
  function handleError(error, respond) {
    debug('handling error - message: %s, code: %s', error.message, error.code);
    try {
      if (adapter.waitForResponse) {
        adapter.emit('error', error, respond);
      } else if (process.env.NODE_ENV === 'development') {
        adapter.emit('error', error);
        respond({ status: 500 }, { content: error.message });
      } else {
        adapter.emit('error', error);
        respond(error);
      }
    } catch (userError) {
      process.nextTick(function () {
        throw userError;
      });
    }
  }

  /**
   * Request listener used to handle Slack requests and send responses and
   * verify request signatures
   *
   * @param {Object} req - Request object
   * @param {Object} res - Response object
   */
  return function slackEventRequestListener(req, res) {
    debug('request recieved - method: %s, path: %s', req.method, req.url);

    // Bind a response function to this request's respond object.
    var respond = sendResponse(res);

    (0, _rawBody2.default)(req).then(function (r) {
      var rawBody = r.toString();

      if (verifyRequestSignature({
        signingSecret: adapter.signingSecret,
        requestSignature: req.headers['x-slack-signature'],
        requestTimestamp: req.headers['x-slack-request-timestamp'],
        body: rawBody
      })) {
        // Request signature is verified
        // Parse raw body
        var body = JSON.parse(rawBody);

        // Handle URL verification challenge
        if (body.type === 'url_verification') {
          debug('handling url verification');
          respond(null, { content: body.challenge });
          return;
        }

        var emitArguments = [body.event];
        if (adapter.includeBody) {
          emitArguments.push(body);
        }
        if (adapter.includeHeaders) {
          emitArguments.push(req.headers);
        }
        if (adapter.waitForResponse) {
          emitArguments.push(respond);
        } else {
          respond();
        }

        debug('emitting event -  type: %s, arguments: %o', body.event.type, emitArguments);
        adapter.emit.apply(adapter, [body.event.type].concat(emitArguments));
      }
    }).catch(function (error) {
      handleError(error, respond);
    });
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=http-handler.js.map