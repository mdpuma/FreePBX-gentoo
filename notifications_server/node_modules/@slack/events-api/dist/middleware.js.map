{"version":3,"sources":["../src/middleware.js"],"names":["errorCodes","NO_BODY_PARSER","TOKEN_VERIFICATION_FAILURE","responseStatuses","OK","FAILURE","REDIRECT","bindMiddlewareToAdapter","adapter","sendResponse","res","_sendResponse","err","responseOptions","status","failWithNoRetry","redirectLocation","set","send","content","handleError","error","next","expressPropagateErrors","respond","waitForResponse","emit","middleware","slackEventAdapterMiddlware","req","body","Error","code","type","token","verificationToken","challenge","emitArguments","event","includeRawBody","push"],"mappings":"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","file":"middleware.js","sourcesContent":["import { packageIdentifier } from './util';\n\nexport const errorCodes = {\n  NO_BODY_PARSER: 'SLACKEVENTMIDDLEWARE_NO_BODY_PARSER',\n  TOKEN_VERIFICATION_FAILURE: 'SLACKEVENTMIDDLEWARE_TOKEN_VERIFICATION_FAILURE',\n};\n\nconst responseStatuses = {\n  OK: 200,\n  FAILURE: 500,\n  REDIRECT: 302,\n};\n\nfunction bindMiddlewareToAdapter(adapter) {\n  function sendResponse(res) {\n    return function _sendResponse(err, responseOptions = {}) {\n      // Deal with errors up front\n      if (err) {\n        res.status(responseStatuses.FAILURE);\n      } else {\n        // First determine the response status\n        if (responseOptions) {\n          if (responseOptions.failWithNoRetry) {\n            res.status(responseStatuses.FAILURE);\n          } else if (responseOptions.redirectLocation) {\n            res.status(responseStatuses.REDIRECT);\n          }\n        } else {\n          res.status(responseStatuses.OK);\n        }\n\n        // Next determine the response headers\n        if (responseOptions && responseOptions.failWithNoRetry) {\n          res.set('X-Slack-No-Retry', '1');\n        }\n        res.set('X-Slack-Powered-By', packageIdentifier());\n      }\n\n      // Lastly, send the response\n      res.send(responseOptions.content || '');\n    };\n  }\n\n  function handleError(error, res, next) {\n    if (adapter.expressPropagateErrors) {\n      next(error);\n    }\n    const respond = sendResponse(res);\n    if (adapter.waitForResponse) {\n      adapter.emit('error', error, respond);\n    } else {\n      adapter.emit('error', error);\n      respond(error);\n    }\n  }\n\n  // eslint-disable-next-line no-param-reassign\n  adapter.middleware = function slackEventAdapterMiddlware(req, res, next) {\n    // Check that the request body has been parsed\n    if (!req.body) {\n      const error = new Error('The incoming HTTP request did not have a parsed body.');\n      error.code = errorCodes.NO_BODY_PARSER;\n      handleError(error, res, next);\n      return;\n    }\n\n    // Handle event challenge\n    if (req.body.type === 'url_verification') {\n      if (req.body.token !== adapter.verificationToken) {\n        const error = new Error('Slack event challenge failed.');\n        error.code = errorCodes.TOKEN_VERIFICATION_FAILURE;\n        error.body = req.body;\n        handleError(error, res, next);\n        return;\n      }\n      sendResponse(res)(null, { content: req.body.challenge });\n      return;\n    }\n\n    // Handle event token verification\n    if (req.body.token && req.body.token !== adapter.verificationToken) {\n      const error = new Error('Slack event verification failed');\n      error.code = errorCodes.TOKEN_VERIFICATION_FAILURE;\n      error.body = req.body;\n      handleError(error, res, next);\n      return;\n    }\n\n    // TODO: expose whether this is a retry and what the retry reason would be\n    const emitArguments = [req.body.event];\n    if (adapter.includeRawBody) {\n      emitArguments.push(req.body);\n    }\n    if (adapter.waitForResponse) {\n      emitArguments.push(sendResponse(res));\n    }\n    try {\n      adapter.emit(req.body.event.type, ...emitArguments);\n    } catch (error) {\n      adapter.emit('error', error);\n    }\n\n    if (!adapter.waitForResponse) {\n      sendResponse(res)();\n    }\n  };\n}\n\nexport default {\n  bindMiddlewareToAdapter,\n};\n"]}