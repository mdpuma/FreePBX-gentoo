#!/usr/bin/env node
'use strict';

var _yargs = require('yargs');

var _yargs2 = _interopRequireDefault(_yargs);

var _index = require('./index');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var argv = _yargs2.default.options({
  secret: {
    alias: 's',
    describe: 'Slack request signing secret from the App management page',
    demand: true,
    type: 'string'
  },
  path: {
    alias: 'p',
    describe: 'The path (part of URL after hostname and port) that resolves to your Request URL in the App management page',
    default: '/slack/events',
    type: 'string'
  },
  port: {
    alias: 'l',
    describe: 'The local port for the HTTP server. The development proxy should be configured to forward to this port.',
    default: 3000,
    type: 'number'
  }
}).help().argv;

var slackEvents = (0, _index.createEventAdapter)(argv.secret);

/* eslint-disable no-console */
slackEvents.createServer(argv.path).then(function (server) {
  return new Promise(function (resolve, reject) {
    server.on('error', reject);
    server.listen(argv.port, function () {
      var _server$address = server.address(),
          address = _server$address.address,
          port = _server$address.port;

      console.log('The verification server is now listening at the URL: http://' + address + ':' + port + argv.path);
      resolve();
    });
  });
}).catch(function (error) {
  console.error('The verification server failed to start. error: ' + error.message);
});
/* eslint-enable no-console */
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy92ZXJpZnkuanMiXSwibmFtZXMiOlsiYXJndiIsInlhcmdzIiwib3B0aW9ucyIsInNlY3JldCIsImFsaWFzIiwiZGVzY3JpYmUiLCJkZW1hbmQiLCJ0eXBlIiwicGF0aCIsImRlZmF1bHQiLCJwb3J0IiwiaGVscCIsInNsYWNrRXZlbnRzIiwiY3JlYXRlU2VydmVyIiwidGhlbiIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0Iiwic2VydmVyIiwib24iLCJsaXN0ZW4iLCJhZGRyZXNzIiwiY29uc29sZSIsImxvZyIsImNhdGNoIiwiZXJyb3IiLCJtZXNzYWdlIl0sIm1hcHBpbmdzIjoiOztBQUVBOzs7O0FBQ0E7Ozs7QUFFQSxJQUFNQSxPQUFPQyxnQkFDVkMsT0FEVSxDQUNGO0FBQ1BDLFVBQVE7QUFDTkMsV0FBTyxHQUREO0FBRU5DLGNBQVUsMkRBRko7QUFHTkMsWUFBUSxJQUhGO0FBSU5DLFVBQU07QUFKQSxHQUREO0FBT1BDLFFBQU07QUFDSkosV0FBTyxHQURIO0FBRUpDLGNBQVUsNkdBRk47QUFHSkksYUFBUyxlQUhMO0FBSUpGLFVBQU07QUFKRixHQVBDO0FBYVBHLFFBQU07QUFDSk4sV0FBTyxHQURIO0FBRUpDLGNBQVUseUdBRk47QUFHSkksYUFBUyxJQUhMO0FBSUpGLFVBQU07QUFKRjtBQWJDLENBREUsRUFxQlZJLElBckJVLEdBc0JWWCxJQXRCSDs7QUF3QkEsSUFBTVksY0FBYywrQkFBbUJaLEtBQUtHLE1BQXhCLENBQXBCOztBQUVBO0FBQ0FTLFlBQ0dDLFlBREgsQ0FDZ0JiLEtBQUtRLElBRHJCLEVBRUdNLElBRkgsQ0FFUTtBQUFBLFNBQVUsSUFBSUMsT0FBSixDQUFZLFVBQUNDLE9BQUQsRUFBVUMsTUFBVixFQUFxQjtBQUMvQ0MsV0FBT0MsRUFBUCxDQUFVLE9BQVYsRUFBbUJGLE1BQW5CO0FBQ0FDLFdBQU9FLE1BQVAsQ0FBY3BCLEtBQUtVLElBQW5CLEVBQXlCLFlBQU07QUFBQSw0QkFDSFEsT0FBT0csT0FBUCxFQURHO0FBQUEsVUFDckJBLE9BRHFCLG1CQUNyQkEsT0FEcUI7QUFBQSxVQUNaWCxJQURZLG1CQUNaQSxJQURZOztBQUU3QlksY0FBUUMsR0FBUixrRUFBMkVGLE9BQTNFLFNBQXNGWCxJQUF0RixHQUE2RlYsS0FBS1EsSUFBbEc7QUFDQVE7QUFDRCxLQUpEO0FBS0QsR0FQZSxDQUFWO0FBQUEsQ0FGUixFQVVHUSxLQVZILENBVVMsVUFBQ0MsS0FBRCxFQUFXO0FBQ2hCSCxVQUFRRyxLQUFSLHNEQUFpRUEsTUFBTUMsT0FBdkU7QUFDRCxDQVpIO0FBYUEiLCJmaWxlIjoidmVyaWZ5LmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG5cbmltcG9ydCB5YXJncyBmcm9tICd5YXJncyc7XG5pbXBvcnQgeyBjcmVhdGVFdmVudEFkYXB0ZXIgfSBmcm9tICcuL2luZGV4JztcblxuY29uc3QgYXJndiA9IHlhcmdzXG4gIC5vcHRpb25zKHtcbiAgICBzZWNyZXQ6IHtcbiAgICAgIGFsaWFzOiAncycsXG4gICAgICBkZXNjcmliZTogJ1NsYWNrIHJlcXVlc3Qgc2lnbmluZyBzZWNyZXQgZnJvbSB0aGUgQXBwIG1hbmFnZW1lbnQgcGFnZScsXG4gICAgICBkZW1hbmQ6IHRydWUsXG4gICAgICB0eXBlOiAnc3RyaW5nJyxcbiAgICB9LFxuICAgIHBhdGg6IHtcbiAgICAgIGFsaWFzOiAncCcsXG4gICAgICBkZXNjcmliZTogJ1RoZSBwYXRoIChwYXJ0IG9mIFVSTCBhZnRlciBob3N0bmFtZSBhbmQgcG9ydCkgdGhhdCByZXNvbHZlcyB0byB5b3VyIFJlcXVlc3QgVVJMIGluIHRoZSBBcHAgbWFuYWdlbWVudCBwYWdlJyxcbiAgICAgIGRlZmF1bHQ6ICcvc2xhY2svZXZlbnRzJyxcbiAgICAgIHR5cGU6ICdzdHJpbmcnLFxuICAgIH0sXG4gICAgcG9ydDoge1xuICAgICAgYWxpYXM6ICdsJyxcbiAgICAgIGRlc2NyaWJlOiAnVGhlIGxvY2FsIHBvcnQgZm9yIHRoZSBIVFRQIHNlcnZlci4gVGhlIGRldmVsb3BtZW50IHByb3h5IHNob3VsZCBiZSBjb25maWd1cmVkIHRvIGZvcndhcmQgdG8gdGhpcyBwb3J0LicsXG4gICAgICBkZWZhdWx0OiAzMDAwLFxuICAgICAgdHlwZTogJ251bWJlcicsXG4gICAgfSxcbiAgfSlcbiAgLmhlbHAoKVxuICAuYXJndjtcblxuY29uc3Qgc2xhY2tFdmVudHMgPSBjcmVhdGVFdmVudEFkYXB0ZXIoYXJndi5zZWNyZXQpO1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1jb25zb2xlICovXG5zbGFja0V2ZW50c1xuICAuY3JlYXRlU2VydmVyKGFyZ3YucGF0aClcbiAgLnRoZW4oc2VydmVyID0+IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICBzZXJ2ZXIub24oJ2Vycm9yJywgcmVqZWN0KTtcbiAgICBzZXJ2ZXIubGlzdGVuKGFyZ3YucG9ydCwgKCkgPT4ge1xuICAgICAgY29uc3QgeyBhZGRyZXNzLCBwb3J0IH0gPSBzZXJ2ZXIuYWRkcmVzcygpO1xuICAgICAgY29uc29sZS5sb2coYFRoZSB2ZXJpZmljYXRpb24gc2VydmVyIGlzIG5vdyBsaXN0ZW5pbmcgYXQgdGhlIFVSTDogaHR0cDovLyR7YWRkcmVzc306JHtwb3J0fSR7YXJndi5wYXRofWApO1xuICAgICAgcmVzb2x2ZSgpO1xuICAgIH0pO1xuICB9KSlcbiAgLmNhdGNoKChlcnJvcikgPT4ge1xuICAgIGNvbnNvbGUuZXJyb3IoYFRoZSB2ZXJpZmljYXRpb24gc2VydmVyIGZhaWxlZCB0byBzdGFydC4gZXJyb3I6ICR7ZXJyb3IubWVzc2FnZX1gKTtcbiAgfSk7XG4vKiBlc2xpbnQtZW5hYmxlIG5vLWNvbnNvbGUgKi9cbiJdfQ==
//# sourceMappingURL=verify.js.map