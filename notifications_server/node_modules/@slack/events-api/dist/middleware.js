'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.errorCodes = undefined;

var _util = require('./util');

var errorCodes = exports.errorCodes = {
  NO_BODY_PARSER: 'SLACKEVENTMIDDLEWARE_NO_BODY_PARSER',
  TOKEN_VERIFICATION_FAILURE: 'SLACKEVENTMIDDLEWARE_TOKEN_VERIFICATION_FAILURE'
};

var responseStatuses = {
  OK: 200,
  FAILURE: 500,
  REDIRECT: 302
};

function bindMiddlewareToAdapter(adapter) {
  function sendResponse(res) {
    return function _sendResponse(err) {
      var responseOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      // Deal with errors up front
      if (err) {
        res.status(responseStatuses.FAILURE);
      } else {
        // First determine the response status
        if (responseOptions) {
          if (responseOptions.failWithNoRetry) {
            res.status(responseStatuses.FAILURE);
          } else if (responseOptions.redirectLocation) {
            res.status(responseStatuses.REDIRECT);
          }
        } else {
          res.status(responseStatuses.OK);
        }

        // Next determine the response headers
        if (responseOptions && responseOptions.failWithNoRetry) {
          res.set('X-Slack-No-Retry', '1');
        }
        res.set('X-Slack-Powered-By', (0, _util.packageIdentifier)());
      }

      // Lastly, send the response
      res.send(responseOptions.content || '');
    };
  }

  function handleError(error, res, next) {
    if (adapter.expressPropagateErrors) {
      next(error);
    }
    var respond = sendResponse(res);
    if (adapter.waitForResponse) {
      adapter.emit('error', error, respond);
    } else {
      adapter.emit('error', error);
      respond(error);
    }
  }

  // eslint-disable-next-line no-param-reassign
  adapter.middleware = function slackEventAdapterMiddlware(req, res, next) {
    // Check that the request body has been parsed
    if (!req.body) {
      var error = new Error('The incoming HTTP request did not have a parsed body.');
      error.code = errorCodes.NO_BODY_PARSER;
      handleError(error, res, next);
      return;
    }

    // Handle event challenge
    if (req.body.type === 'url_verification') {
      if (req.body.token !== adapter.verificationToken) {
        var _error = new Error('Slack event challenge failed.');
        _error.code = errorCodes.TOKEN_VERIFICATION_FAILURE;
        _error.body = req.body;
        handleError(_error, res, next);
        return;
      }
      sendResponse(res)(null, { content: req.body.challenge });
      return;
    }

    // Handle event token verification
    if (req.body.token && req.body.token !== adapter.verificationToken) {
      var _error2 = new Error('Slack event verification failed');
      _error2.code = errorCodes.TOKEN_VERIFICATION_FAILURE;
      _error2.body = req.body;
      handleError(_error2, res, next);
      return;
    }

    // TODO: expose whether this is a retry and what the retry reason would be
    var emitArguments = [req.body.event];
    if (adapter.includeRawBody) {
      emitArguments.push(req.body);
    }
    if (adapter.waitForResponse) {
      emitArguments.push(sendResponse(res));
    }
    try {
      adapter.emit.apply(adapter, [req.body.event.type].concat(emitArguments));
    } catch (error) {
      adapter.emit('error', error);
    }

    if (!adapter.waitForResponse) {
      sendResponse(res)();
    }
  };
}

exports.default = {
  bindMiddlewareToAdapter: bindMiddlewareToAdapter
};
//# sourceMappingURL=data:application/json;base64,
//# sourceMappingURL=middleware.js.map